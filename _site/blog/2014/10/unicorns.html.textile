




<!doctype html>
<html lang="en" class="no-js">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>Stop Hiring Unicorns</title>
  <meta name="description" content="Jan designs and prototypes experiences.">
  <meta name="author" content="Jan Zheng">
  <meta name="keywords" content="user experience, ux, interaction design, digital, advertising, ui design, code, prototyping, resume ,portfolio">
  
  <meta name="viewport" content="initial-scale=1.0, width=device-width, maximum-scale=1" />

  <link href='http://fonts.googleapis.com/css?family=Josefin+Sans:100' rel='stylesheet' type='text/css'>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans:300,400,400italic,600, 700' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Droid+Serif:400,400italic,700,700italic' rel='stylesheet' type='text/css'>

  <link rel="stylesheet" href="/app/css/royalslider.css" > 
  <link rel="stylesheet" href="/app/css/minimal-white/rs-minimal-white.css" >

  <script src="/app/js/jquery.min.js"></script>

  <link rel="shortcut icon" type="image/x-icon" href="/favicon.png">

  <!-- import gets all the styles from main.scss in the _scss folder -->
  <link rel="stylesheet" href="/app/css/import.css">

</head>

<body id="skrollr-body">  
  <div class="color-palette color-top" id="top">
    <div id="c1"></div><div id="c2"></div><div id="c3"></div><div id="c4"></div><div id="c5"></div>
    <div id="a1"></div><div id="a2"></div><div id="a3"></div><div id="a4"></div><div id="a5"></div>
  </div>


  <!-- Navigation -->
  <!-- Main navigation
        - stays to the left side >480. Static at the top <480. Mobile nav kicks in with a scroll top.
   -->
  <div class="nav">

    <!-- JZ logo -->
    <div class="nav__logo clearfix">
      <a class="nav__logo__link" href="/">
        <div class="nav__logo__content ">
          <span class="nav__j">jan </span><span class="nav__z">zheng</span>
        </div>
      </a>
    </div>

    <!-- Main navigation buttons -->
    <div class="nav__menu">
      <div class="nav__menu__content">

      <!-- generate links and mark nav as active -->
      
      
        
        <a href="/">
          <div class="nav__item nav__blog 
                      
                       active" >
            <!-- <span class="icon icon--blog"></span> -->
            <div class="nav__label">thoughts</div>
          </div>
        </a>
        

        

        


      
      
        

        
        
        <a href="/about.html">
          <div class="nav__item nav__about " >
            <!-- <span class="icon icon--about"></span> -->
            <div class="nav__label">about </div>
          </div>
        </a>
        

        


      
      
        

        

        
        
        <a href="/toolbox.html" >
          <div class="nav__item nav__tools " >
            <!-- <span class="icon icon--tools"></span> -->
            <div class="nav__label">tools</div>
          </div>
        </a>
        


      


      </div>
    </div>


    

    <!-- Social icons / contact (email, twitter, linkedin) -->
    <div class="nav__social">
      <a href="mailto:hello@janzheng.com?Subject=Hello%20Jan!">
        <div class="nav__social__item nav__social__email ">
          <!-- <span class="icon icon--small icon--email"></span> -->
          <div class="nav__social__label">email</div>
        </div>
      </a>

      <a href="https://twitter.com/janistanian">
        <div class="nav__social__item nav__social__twitter">
          <!-- <span class="icon icon--small icon--twitter"></span> -->
          <div class="nav__social__label">tweet</div>
        </div>
      </a>


      <a href="http://www.linkedin.com/in/janzh">
        <div class="nav__social__item nav__social__linkedin">
          <!-- <span class="icon icon--small icon--linkedin"></span> -->
          <div class="nav__social__label">link</div>
        </div>
      </a>

      <a target="_blank" href="http://janzheng.com/resume.pdf">
        <div class="nav__social__item nav__social__resume">
          <!-- <span class="icon icon--small icon--resume"></span> -->
          <div class="nav__social__label">résumé</div>
        </div>
      </a>
    </div>

  </div>
  <!-- End sidebar navigation -->


  <div class="clear"></div>

  <div class="main__container container">

    <!-- Main section for content -->
    <!-- <div class="main"> -->
    <div class="main__body">
      <div class="container">
  <div class="article  post-std ">


    <!-- begin article head content (date, title, summary, tags) -->

    <div 
      class="article__head container "
       >

      <div 
        
      >
        <div class="article__head__intro" >

          
          <div class="article__head__category article__head__category__thought" >

            <!-- <div class="article__head__category__icon"> -->

              

              

              
                <svg class="svg--thought" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <path d="M84 324.6c-13.7-49.3 7.2-122 67-161.4-24.4 32-29 68.8-27.8 89 13.8 1 78.8 6 78.4 63.3 0 65-97 82.7-117.5 9zm147.6-9c0-44.7-32.7-81.7-75.5-88.5 4-34.3 29-67 67-81.3l-16.8-36.5c-124 24.5-173.2 144-151 223.4 30.3 106 176.4 85.3 176.4-17zm83 9c-14-49.3 7-122 66.8-161.4-24.4 32-29 68.8-27.8 89 13.8 1 78.8 6 78.4 63.3 0 65-97 82.7-117.5 9zm147.4-9c0-44.7-32.7-81.7-75.5-88.5 3.8-34.3 29-67 67-81.3l-17-36.5c-124 24.5-173 144-151 223.4C316 438.6 462 418 462 315.6z"/>
</svg>
<!-- 
<svg class="svg--thought" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"> <path id="quote-7-icon" d="M84.068,324.563c-13.78-49.268,7.118-121.859,66.929-161.4c-24.437,32.14-29.024,68.81-27.774,89.164c13.75,1.021,78.75,5.771,78.361,63.194C201.584,380.521,104.679,398.248,84.068,324.563z M231.584,315.521c0-44.646-32.703-81.654-75.459-88.385c3.725-34.4,28.92-67.135,66.943-81.465l-16.887-36.498C82.055,133.672,32.959,253.211,55.178,332.645C85.472,438.556,231.584,417.889,231.584,315.521z M314.484,324.563c-13.78-49.268,7.118-121.859,66.929-161.4c-24.437,32.14-29.024,68.81-27.774,89.164c13.75,1.021,78.75,5.771,78.361,63.194C432,380.521,335.095,398.248,314.484,324.563z M462,315.521c0-44.646-32.703-81.654-75.459-88.385c3.725-34.4,28.92-67.135,66.943-81.465l-16.887-36.498c-124.127,24.498-173.223,144.037-151.004,223.471C315.888,438.556,462,417.889,462,315.521z"></path> </svg> -->
              

              
            <!-- </div> -->
          </div>
          
          <div class="article__category__label">thought</div>
          <div class="article__head__date__container" >
            <div class="article__head__date">
              October 02, 2014
            </div>    
          </div> 

        </div>

        <!-- this is for category tags labels -->
        

        <div class="article__head__title__container" >
          <div class="article__head__title">Stop Hiring Unicorns</div>
        </div> 

        <div class="article__head__subtitle__container" >
          <div class="article__head__subtitle">Do designers need to learn code?</div>
        </div> 


        <div class="article__tags__container" >
          <div class="article__tags">
            
               
                
                <ul class="article__tags__list">
                  
                     
                      <li>ux</li>
                     
                      <li>design</li>
                     
                      <li>code</li>
                     
                      <li>freelance</li>
                     
                      <li>unicorn</li>
                    
                  
                </ul>
                
                
            
          </div>
        </div> 

        

      </div>


    </div>
    <!-- end article head content -->





    <!-- begin article content -->

    <div class="article__body container">

      <!-- 
      <div class="article--summary-container">
        <div class="article--summary">Do designers need to learn code?</div>
      </div>  -->

      <!-- not yet used -->
      <!-- 
      <div class="article__body__video__container">
        <div class="article__body__video">
          
              
        </div>
      </div>
      -->


      <!-- not yet used -->
      <!-- 
      <div class="article--body--titleImage-container">
           
      </div> 
      -->


      <div class="article__body__content">
        <figure class="">
!/app/posts/thoughts/unicorns/rhino.png!
<!-- <figcaption>With Tinder, you will find love, happiness, and unicorns!</figcaption> -->
</figure>



h2. Nature of the Beast

p(dropcap).  Producing good work can be a turbulent process. Consider yourself lucky if you’ve never run into any schedule, budget, or client problems. But if you’re like the rest of us, you can always count on clients to change their minds, make last minute changes, and miscommunicate, leading to stretched budgets, broken project schedules, and frustrated teams. That’s just the nature of the beast.

h2. Searching for Unicorns

With the constant flux of requirements, some companies increasingly turn to “unicorns” - individuals who are equally talented in both visual and user experience design, as well as front-end and perhaps even back-end development. 

These companies realize the power of the all-in-one individual. They want people that can first design complex solutions, and then elegantly realize them. They need people who can save them countless of hours on meetings and presentations spent between designers and developers; they want someone that can do it all, front to back. They want a jack, queen, and king of all trades.

But unicorns are hard to come by, and even more expensive to find. Some have started asking if they actually need unicorns in the first place. Could one unicorn produce better and faster work than a small, well-rounded group of designers and developers? The internet wonders: what if designers could simply learn how to write some code? To some, the answer is a profound "“yes”":http://irondavy.quora.com/Designers-Will-Code, but to others it’s "not so simple":http://ignorethecode.net/blog/2009/03/10/designers-are-not-programmers/. 


<figure class="">
!/app/posts/thoughts/unicorns/charlie.png!
Charlie would rather sleep
</figure>



h2. Focus on Shipping

In any case, the ultimate responsibility of the designer and the developer is to ship a great product. Instead of asking ourselves if our designers should learn code, we should ask ourselves if learning code can help them ship better products.

The designer’s job is to create the best possible user experience. If knowing code helps them design a better experience, then they should probably learn to code. There are many benefits to learning code: it may help designers better communicate ideas and better command respect with developers. It may also help them explore technical possibilities and constraints, as well as maintain their original design vision throughout the process. 

Designers should learn to code if it improves their work. In most cases, they don’t need to understand entire software applications: only the parts that directly affect the user. If their main work is in illustration and video, they would barely need to know any. But if their job is to craft slick, interactive websites, then learning some HTML, CSS, and JavaScript might allow them to collaborate more closely with developers, and to produce better work.

Unicorns are popular because they can both design and implement their own visions. They are multidisciplinary chameleons that shift from one role to another, filling in knowledge gaps that might otherwise require an entire team. Unicorns can adapt and iterate, and save time otherwise lost through meetings and miscommunication. They are valuable because they have potential to iterate faster through requirements, ideas, and implementation cycles than project teams. 

But relying on one unicorn is to put all the eggs in one basket. They’re not cheap, and they can’t do everyone’s work at once.




h2. Working Together

Various projects might require different amount of iteration, as well as different levels of fidelity in design. For many projects, a few Photoshop comps might suffice. But for many projects, comps can be either too static or too unwieldy to edit often. A Photoshop comp also doesn’t always represent the exact appearance in a browser, as appearances may change shape and form depending on browser or. Similarly, some highly interactive sites need to be “played with” in order for designers to find the sweet spot. Some interactive experiences like games and productivity apps would be especially hard to visualize just through comps; they would need to be experienced to be improved upon.

A team of designers and developers with the right knowledge and tools can work just as well as unicorns. Each member doesn’t need to know how to design and build everything, but just enough to strengthen the team. A designer might save time by directly editing the stylesheet of a prototype instead of updating dozens of comps and passing them onto a developer. Similarly, a developer might fix design elements on her own, without any designer feedback, if they knew how to improve on the product. Designers and developers always be holding each other accountable and be looking to fix the small details, many which tend to slip through the cracks of the initial design.

Sometimes, prototyping with video, paper, and even more physical tools might work for a project. In these cases, developers might need to work closer with more traditional designers who have less digital experience but are more adept in traditional design methods. It’s always valuable for each team member to expand their knowledge into other fields, but it’s just as important for each member to specialize in their own skill.

Getting the small details is what makes a product feel right. But getting to that point requires the full participation of each team member, as every person needs to have a keen eye on both the design and the implementation. Projects are living and flexible, and the team behind them must adapt to their constantly changing needs. The team must communicate frequently and help each other as requirements and demands evolve. However, with the right tools and the right combination of knowledge, they would have no problems catching up with the nimble unicorn.




h2. To Code or Not to Code

If you’re a designer, and if you wanted a yes or no answer, then I’m telling you “yes." You should at least experience the process of learning how to write code.  You need to become familiar with the arduous process of implementing, testing, and rewriting code. You don’t need to produce the most beautiful and functional code, but you should understand that code isn’t magic; that developers need to solve for certain challenges when implementing novel or difficult designs. You will also know how to better convince developers to take the more difficult but more user-friendly route, if you understood their challenges and could speak their language. Finally, learning code will also improve your own marketability. Having that a thorough understanding of code, will give you an edge over that competition.

Besides, a little more knowledge never hurt anyone.




h2. Part II - Unicorn Tools


bq(blockquote--wide blockquote--noQuotes). If your only tool is a hammer, every problem will look like a nail. If your only tool is email, every minute will be spent checking your inbox. 

Unicorns are highly sought-after individuals in the creative world. They are considered great visual designers that also understand user experience and interaction design, how to write code, and are generally one-person Swiss army knives that can fill in any missing roles on a project.

Most teams don’t have unicorns, but fortunately they don’t need them either. Plenty of tools have popped up that allow teams to collaborate and communicate better, and to produce cleaner, faster, and better work.


The most important tools for smaller teams should focus on improving team communication, and the production pipeline. These are the elements where unicorns excel at, and where some teams often fall apart. Improving these aspects will collectively improve a team’s production output and quality.

Here are some tools that could potentially help.




h2. Collaboration

Collaboration and communication form the basis of any functional project team. If a team can’t communicate ideas, designs, and deadlines effectively, then any products or outputs will suffer as a consequence. 

The following tools provide alternate ways to communicate project details outside of email. 




A hostile work environment

Stand Up Meetings
Stand up meetings, normally a part of the Agile methodology, is just what it sounds. You meet once a day, usually every morning, and each person or project team talks about three main things: What they’ve accomplished yesterday, What they will accomplish today, and things that prevent them from accomplishing what they need to. That’s it. This lets other members know if they could be of any help, and helps everyone keep each other accountable.

More readings:
http://en.wikipedia.org/wiki/Stand-up_meeting
https://medium.com/product-love/when-scrum-stand-up-meetings-feel-like-an-interrogation-c5e490315b80










h3. Kanban Boards & Trello

Sometimes standup meetings get derailed. People can forget what they’ve been doing, or they work with each other on different projects. Sometimes meetings can get messy. Enter the Kanban board. It is a fancy name for a group of lists: tasks to do, tasks you’re doing, and finished tasks. Some like to add a fourth one with ideas. This list helps the team keep track of both progress and setbacks, and works well in conjunction with standup meetings.

Trello is a product that lets users easily create and collaborate on anything from Kanban boards to shopping lists.



From Trello.com








h3. Slack

Slack has recently been branded the “email killer.” I don’t fully subscribe to that idea that Slack can kill a communication tool that’s been around for over thirty years, but Slack supports some very useful features that may one day supplant email. Slack behaves more like a hybrid chat and email app, where users can write thoughts, post questions, or share documents with other team members. Very useful for ideation, tracking status, and distributed offices.




h2. Prototype Pipeline

Depending on a project’s needs, a project might only need to be presented in a Photoshop. But often the Photoshop files are just an approximation of what a design might look like in a browser. Sometimes the designs have to be prototyped, tested, and iterated upon 




h3. Cloud Services: Dropbox

Dropbox, Box.com, Google Drive, and Microsoft OneDrive all provide cloud storage services for businesses. These are great for keeping assets updated in a pipeline. The key is to use Dropbox for source assets, that prototypes other apps can easily link to. Any updates from a designer will immediately push into the prototype or design comps.

Dropbox also recently added more controls for freelancers, who can make use of the new password protection and link expiration features. 





h3. Collaborative Coding: Github

Most developers have probably used Github from some point as a coding and collaboration tool, or to download a framework or some source code. But Github is also incredibly powerful for non-developers as well, as Github allows for document revision control, and now diff-ing both text and Photoshop documents. 

Github also allows for completely free web hosting using a framework it calls Jekyll







h3. Static Site Generators: Jekyll

Jekyll is a type of static site generator. These behave like a WordPress in that they can generate an entire site from smaller modules, but instead of serving these pages live, the pages are generated into set of static HTML and CSS files. Static site generators can be used to quickly create blogs and other complex sites with deeply nested structures or with lots of repetition

Jekyll is also excellent for quickly generating in-browser comps and prototypes, as changing a word in the header will change that word on every page. Used in conjunction with Github, Jekyll can quickly push new comps and images to the in-browser comps. With Jekyll, creatives can think about and publish changes with modules instead of entire full-page designs, saving a lot of time.

Once done, the prototype can easily be published for free to Github.








h3. Pre-Compiled CSS: Sass

Sass is another tool that can quickly speed up browser comps and prototype development. It’s a type of CSS precompiler, which can abstract CSS production. If you need to change a color of different parts across many pages, you can easily just change it in one place using Sass with a variable, instead of hunting every place that color appears in CSS. Sass also offers many pre-written helpers such as Compass and Bourbon, which can help designers create complex styles much easier.

Paired together with Jekyll and Dropbox, a designer could use Sass to swap out and publish a prototype design almost instantly, without the help of any developer.






h3. Front-end Frameworks: Bootstrap, Foundation

Building on top of pre-compiled CSS, advanced frameworks have cropped up to do a lot of the work required to quickly create fully functional, responsive websites. Both Bootstrap and Foundation are popular among designers and startups who need to quickly deploy beautiful responsive websites. 

The flexibility comes at a cost however, as many frameworks, including Bootstrap and Foundation, are overburdened by complex markup. Since they need to appeal for broad audiences and even a broader need, this flexibility leads to a lot of bloat in production-level code. However, used properly, these frameworks are a boon to quickly iterating through prototypes and ideas.











h3. Package Management & Automation: npm, Bower & Grunt

Many common tasks required to set up a new project, including cloning a new project, setting up Jekyll, installing Sass, frameworks, and including copying projects and duplicating settings can be automated using npm and Bower. npm can be set up to run various scripts, including install and other setup scripts that make life much easier. Bower lets you install and create your own packages like your own CSS and JS code, and can be used to setup prototype variations.

Grunt can be used to run various scripts in sequence, such as Sass to compile your stylesheets into CSS, JSLint to check for JavaScript errors, and finally Uglify to minify the JavaScript, all with a simple “compile” command. Grunt can also be used to watch for changes, updating all necessary files when a file is changed, simplifying the prototype production process.

Together, these tools can cut down on a remarkable amount of time, since they do a lot of the busy work for the designer.




h2. Prototype Production

On larger teams and longer term projects, setting up prototypes in a more production-type environment might make sense. What I mean is to use the previously mentioned tools to create an internal website to keep track of documentation, requirements, style guides, and more. With such a system, different internal teams can start curating information and store it in a central place. 




h3. Live Style Guides

Live style guides are an idea that styles can be fully implemented in a guide to let internal users see how they work, interact with them, and use the code behind them. Live style guides are essentially interactive photoshop comps, able to communicate more than just layout page layout, but also button styles, hover styles, animation, responses to clicks, responsive breakpoints, and many other “live” aspects of a website that a static comp would not be able to communicate. 

Though there are many benefits, live style guides are difficult to maintain. Here’s more on maintinaing styleguides from "LonelyPlanet":http://engineering.lonelyplanet.com/2014/05/18/a-maintainable-styleguide.html





h3. Reactive JavaScript: Meteor & Angular

The last topic I’d like to touch on is reactive JavaScript frameworks. These are considered reactive because the interface can react to changes without any user interaction. These are apps that can update immediately with notifications, and new posts without a browser refresh. Reactive JavaScript frameworks allow designers and developers alike to quickly prototype rich, transactional and collaborative websites- sites like Twitter and Facebook that require logins and can manipulate user data. These frameworks can really allow designers to prototype fully realized web-based applications, and not just static web pages.



h2. Last Words


There are many options for designing, prototyping, and collaborating. With the advent of many tools available for both production and prototyping, designers with even a limited knowledge of code can produce work that is faster, richer, and more interactive.

This post was originally written for Nurun's "Digital For Real Life":http://digitalforreallife.com blog.







        <div class="clear"></div>

        <div class="article__comments">

           
            <div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'janzheng'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<!-- <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->

           

        </div>
      </div>


    </div>

    <!-- end article body -->

    <div class="clear"></div>
      


  </div>
</div>
    </div>
<!-- 
    <div class="main__tumblr">
      <p>Latest from <a href="http://YOURBLOG.tumblr.com/">our Tumblr blog</a>...</p>
      <h2 id="blog-headline"></h2>
      <div id="blog-body"></div>
      <ul id="blog-more">
      </ul>
    </div>
 -->
    <div class="main__footer">
        &copy; 2016 – Built on <a href="https://github.com/mojombo/jekyll">Jekyll</a>. Get the template <a href="https://github.com/janzheng/janzheng.github.com">on Github</a>
    </div> 
    <!-- </div> -->

  </div>
  <!-- End container -->
















<!-- 
  <script src="//ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.0.6-development-only.js"></script>
 -->
  <!-- Google Prettify - https://code.google.com/p/google-code-prettify/wiki/GettingStarted 
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=css&lang=html&lang=js&skin=desert"></script>
  -->


  <!-- <script src="/assets/js/plugins.js"></script> -->
  <!-- 
  <script src="/app/js/jquery.flexslider-min.js"></script>
  <script src="/app/js/slimbox2.js"></script>
 -->

  <script src="/app/js/waypoints.min.js"></script>
  <script src="/app/js/skrollr.min.js"></script>

  <script src="/app/js/list.min.js"></script>
  <script src="/app/js/jquery.fluidbox.min.js"></script>
  <script src="/app/js/jquery.royalslider.min.js"></script>
  
  <script src="/app/js/script.js"></script>
  


  
  <script type="text/javascript" src="http://www.google.com/jsapi"></script>
  <script type="text/javascript">
  google.load("feeds", "1") //Load Google Ajax Feed API (version 1)
  </script>

  <!-- old name: funkability -->
  <script type="text/javascript" src="http://ja-nz.tumblr.com/api/read/json"></script>
  <script type="text/javascript">
      // The variable "tumblr_api_read" is now set.
      console.log('LOAD TUMBLR')
      // console.log('tumblr json: ' + JSON.stringify(tumblr_api_read['tumblelog'] ));
      // console.log('tumblr json: ' + JSON.stringify(tumblr_api_read["posts"][0]['url'] ));

      // console.log('<a href="' + tumblr_api_read['posts'][0]['url'] + '">Most recent Tumblr post</a>');

      // console.log(JSON.stringify(tumblr_api_read));
      console.log(tumblr_api_read);


      // Get tumblr post
      function getTumblr() {

        $.ajax({
          type: 'GET',
          url: "http://api.tumblr.com/v2/blog/ja-nz.tumblr.com/posts?api_key=inC0HuM2X45UqdQ6RhPJvRXoWEYJiH4JEcrsVD281MSdZUoLao",
          async: false,
          jsonpCallback: 'jsonCallback',
          contentType: "application/json",
          dataType: 'jsonp',
          success: function(json) {
            var posts = json.response.posts;
            var latest = json.response.posts[0];
            console.log(posts);
            $("#blog-headline").text(latest.title);
            $("#blog-body").html(latest.body);
            json.response.posts.forEach(function(el, i) {
              // if(i > 4) return false;
              $("#blog-more").append("<li><a href='"+ el.post_url +"'>"+ el.title +"</li>");
            });
          },
          error: function(e) {
            console.log(e.message);
          }
        });
      }

      getTumblr();
  </script>
  <!-- <script src="/app/js/tumblriffic.js"></script> -->
  

  <!-- new google analytics beta -->
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-39843414-1', 'janzheng.com');
    ga('send', 'pageview');

  </script>

</body>
</html>
