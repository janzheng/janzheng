---
layout: light
---

<div class="_grid-four-one bookmarks" id="landing" markdown="1" id="tumblrList">
  <div class="index-intro">

    <div class="_width-content-max-narrow _size-vheight _padding-2" data-vheight="25">
      <h2 class="_page-header">bookmarks  </h2>
      <p>
        This social bookmarking experiment turned out rather useful.
        I use it to access my favorite links on an almost daily basis. <a href="/blog/2016/08/tumblr-bookmarks.html">read more here</a>
      </p>
      <div>
        <span class="loadMore">
          <a href="#" >load more</a>
        </span>
        /
        <span class="loadAll">
          <a href="#" >load all</a> <span class="_font-small _font-italic">(300 links @10 mb+ download)</span></span>
      </div>
      <div class="loading">
      </div>
    </div>

    <div class="" >
      <div class="_padding-top _padding-left-2 _padding-bottom">
        <span class="_tag-title"></span>
        <span class="_search-title"></span>
      </div>
      <ul class="list _bookmarks" id="output">
        
      </ul>

    </div>
  </div>

  <aside class="_hidden-xs">
    <!-- <h1 class="_transparent">menu</h1> -->
    <div class="_tumblr-sidebar _sidebar --pinned _padding-right-2 _padding-top-half">
      <div class="_filter"><input id="_tumblr-search" pattern=".*\S.*" class="tumblr__search search" placeholder="Filter" /> </div>
      <div class="_tags _padding-top">tags</div>
    </div>
  </aside>

<!-- <div id="users">
  <input class="search" placeholder="Search" />
  <button class="sort" data-sort="name">
    Sort by name
  </button>

  <ul class="list">
    <li>
      <h3 class="name">Jonny Stromberg</h3>
      <p class="born">1986</p>
    </li>
    <li>
      <h3 class="name">Jonas Arnklint</h3>
      <p class="born">1985</p>
    </li>
    <li>
      <h3 class="name">Martina Elm</h3>
      <p class="born">1986</p>
    </li>
    <li>
      <h3 class="name">Gustaf Lindqvist</h3>
      <p class="born">1983</p>
    </li>
  </ul>

</div> -->


</div>



<!-- tumblr code -->

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
<script type="text/javascript" src="http://www.google.com/jsapi"></script>
<script type="text/javascript">
google.load("feeds", "1") //Load Google Ajax Feed API (version 1)
</script>

<script src="//cdnjs.cloudflare.com/ajax/libs/list.js/1.5.0/list.min.js"></script>
<script src="./javascripts/tumblrdata.js"></script>
<script src="./javascripts/tumblr.js"></script>


<!-- <script>
var options = {
  valueNames: [ 'name', 'born' ]
};

var userList = new List('users', options);
</script> -->



<script>
var _limit = 20; // 20; // load 20 is default posts every time
// Load fewer posts on mobile
if((/Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i).test(navigator.userAgent || navigator.vendor || window.opera)){
  _limit = 5;
}
var tags = [], posts = [], latest = null, index = 0, total = 0, loadAll = false;
var times = 0; // temp


$('.loadAll').on('mouseup', function() {
  loadAll = true;
  $('.loading').html('loading everything...!'); // clear first for dupes
  $('#output').html(''); // clear first for dupes
  posts = []; // clear posts to reload everything
  getTumblr({limit: _limit, offset: 0}, tumblrSuccess);
})

$(document).ready(function() {
  getTumblr({limit: _limit, offset: 0}, tumblrSuccess);

  // check imported tumblr data

  // load more
  $('.loadMore').click(function() {loadmore()});
  function loadmore() {
    filterReset(); // must reset, or the previously filtered posts will be gone!
    index = posts.length + 1; // * _limit;
    $('#output').html('');
    getTumblr({limit: _limit, offset: index}, tumblrSuccess);
  }
});


function tumblrSuccess(json, payload) {
  if(json.response.posts.length != 0) {
    // posts.push(json.response.posts);
    posts = posts.concat(json.response.posts) // merge arrays instead of pushing to build a single array
    latest = json.response.posts[0];
    total = json.response.total_posts;

    // console.log('posts: ', total, posts, json.response, json.response.posts);
    // times++;

    // $('#output').html($('#output').html + objs)
    // if(times >= total/_limit) {
    //   // print objects
    //   var output = '{ "objects": [';
    //   posts.forEach(function(post, i){
    //     // console.log('obj:', post);
    //     output += JSON.stringify(post);
    //     if(i != posts.length-1) {output += ","; }
    //   });
    //   output += "]}"; // close object
    //   console.log('json ------------------------------------------------ :' , json);
    // }

    // if(times <= total/_limit+1) {
    //   console.log(_limit*times, times, total/_limit)
    //   getTumblr({limit: _limit, offset: times*_limit}, tumblrSuccess);
    //   times++;
    // }

    // combine local and fetched data
    // takes a LONG time and loads in all images so expect 10 MB+ of data
    if(loadAll) {
      if (typeof(_tmblrData) !== 'undefined') {
        var combined = _.merge(_tmblrData["objects"], posts)
        // populate(_tmblrData['objects'], $('#output'));
        populate(combined, $('#output'), tags);
        $('.loading').html(''); // clear first for dupes
      }
    } else {
      populate(posts, $('#output'), tags);
    }

    populateTags(tags, $('._tags')); // tags built in populate
    filterInit('tumblrList');   // initialize tag bindings
  }
}

$('#_tumblr-search').on('keyup', function(e) {
  var filterVal = $(this).val();
  var searchTitle = $('._search-title');
  var tagTitle = $('._tag-title');
  if (tagTitle.html() !== '') {
    $(searchTitle).html(` and <h5 class="_inline">${filterVal}</h5>`);
  } else {
    $(searchTitle).html(`Showing <h5 class="_inline">${filterVal}</h5>`);
  }
})


</script>